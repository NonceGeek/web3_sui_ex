# MoveDID

```elixir
Mix.install([:poison, :jason, {:web3_move_ex, "~> 0.2.0"}])
```

```elixir

{:ok, rpc} = Aptos.RPC.connect("https://fullnode.testnet.aptoslabs.com/v1")
f = %Web3MoveEx.Aptos.Types.Function{
	address: 0xdea79e568e00066f60fbfe6ac6d8a9ef2fabbeadc6aae1ec9158d50f6efe4ac8,
	is_entry: true,
	module: "addr_aggregator",
	name: "create_addr_aggregator",
	params: [:string, :u64],
	return: [],
	type_params: [%{"constraints" => []}],
	visibility: :public
}

#    public entry fun create_addr_aggregator(acct: &signer, type: u64, description: String) acquires CreateAddrAggregatorEventSet {
#        let addr_aggr = AddrAggregator {
#            key_addr: signer::address_of(acct),
#            addr_infos_map: table::new(),
#           addrs: vector::empty<String>(),
#            type,
#            description,
#            max_id: 0,
#            add_addr_events: account::new_event_handle<AddAddrEvent>(acct),
#            update_addr_signature_events: account::new_event_handle<UpdateAddrSignatureEvent>(acct),
#            update_addr_events: account::new_event_handle<UpdateAddrEvent>(acct),
#            delete_addr_events: account::new_event_handle<DeleteAddrEvent>(acct),
#            modified_counter:0,
#        };

#        emit_create_addr_aggregator_event(signer::address_of(acct), type, description);

#        move_to<AddrAggregator>(acct, addr_aggr);
#    }

f = %Web3MoveEx.Aptos.Types.Function{
	address: "0xdea79e568e00066f60fbfe6ac6d8a9ef2fabbeadc6aae1ec9158d50f6efe4ac8",
	is_entry: true,
	module: "addr_aggregator",
	name: "add_addr",
	params: [:u64, :string, :string, {:vector, :string}, :string, u64],
	return: [],
	type_params: [%{"constraints" => []}],
	visibility: :public
}

    # // Add addr.
    # public entry fun add_addr(
    #     acct: &signer,
    #     addr_type: u64,
    #     addr: String,
    #     pubkey: String,
    #     chains: vector<String>,
    #     description: String,
    #     expired_at: u64
    # ) acquires AddrAggregator {
    #     let send_addr = signer::address_of(acct);
    #    let addr_aggr = borrow_global_mut<AddrAggregator>(send_addr);

    #     do_add_addr(addr_aggr, send_addr, addr_type, addr, pubkey, chains, description, expired_at);
    # }

payload = Aptos.call_function(f, [], ["testAcct", 1])
{:ok, account_ol} = Aptos.load_account(rpc, acct)
Aptos.submit_txn(rpc, account_ol, payload)
```
